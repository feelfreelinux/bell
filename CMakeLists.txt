cmake_minimum_required(VERSION 2.8.12)

project(bell)

# Configurable options
option(BELL_DISABLE_CODECS "Disable the entire audio codec wrapper" OFF)
option(BELL_CODEC_AAC "Support libhelix-aac codec" ON)
option(BELL_CODEC_MP3 "Support libhelix-mp3 codec" ON)
option(BELL_CODEC_VORBIS "Support tremor Vorbis codec" ON)
option(BELL_CODEC_ALAC "Support Apple ALAC codec" ON)
option(BELL_CODEC_OPUS "Support Opus codec" ON)
option(BELL_DISABLE_SINKS "Disable all built-in audio sink implementations" OFF)
# These are default OFF, as they're OS-dependent (ESP32 sinks are always enabled - no external deps)
option(BELL_SINK_ALSA "Enable ALSA audio sink" OFF)
option(BELL_SINK_PORTAUDIO "Enable PortAudio sink" OFF)
# cJSON wrapper
option(BELL_DISABLE_CJSON "Disable cJSON and JSONObject completely" OFF)
set(BELL_EXTERNAL_CJSON "" CACHE STRING "External cJSON library target name, optional")

# Backwards compatibility with deprecated options
if(BELL_EXTERNAL_TREMOR)
    message(WARNING "Deprecated Bell options used, replace BELL_EXTERNAL_TREMOR with BELL_CODEC_VORBIS=OFF")
    set(BELL_CODEC_VORBIS OFF)
endif()
if(BELL_USE_ALSA)
    message(WARNING "Deprecated Bell options used, replace BELL_USE_ALSA with BELL_SINK_ALSA")
    set(BELL_SINK_ALSA ${BELL_USE_ALSA})
endif()
if(BELL_USE_PORTAUDIO)
    message(WARNING "Deprecated Bell options used, replace BELL_USE_PORTAUDIO with BELL_SINK_PORTAUDIO")
    set(BELL_SINK_PORTAUDIO ${BELL_USE_PORTAUDIO})
endif()

message(STATUS "Bell options:")
message(STATUS "    Disable all codecs: ${BELL_DISABLE_CODECS}")
if(NOT BELL_DISABLE_CODECS)
    message(STATUS "    - AAC audio codec: ${BELL_CODEC_AAC}")
    message(STATUS "    - MP3 audio codec: ${BELL_CODEC_MP3}")
    message(STATUS "    - Vorbis audio codec: ${BELL_CODEC_VORBIS}")
    message(STATUS "    - Opus audio codec: ${BELL_CODEC_OPUS}")
    message(STATUS "    - ALAC audio codec: ${BELL_CODEC_ALAC}")
endif()
message(STATUS "    Disable built-in audio sinks: ${BELL_DISABLE_SINKS}")
if(NOT BELL_DISABLE_SINKS)
    message(STATUS "    - ALSA sink: ${BELL_SINK_ALSA}")
    message(STATUS "    - PortAudio sink: ${BELL_SINK_PORTAUDIO}")
endif()
message(STATUS "    Disable cJSON and JSONObject: ${BELL_DISABLE_CJSON}")

# Include nanoPB library
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/nanopb/extra")
find_package(Nanopb REQUIRED)
list(APPEND EXTRA_INCLUDES ${NANOPB_INCLUDE_DIRS})

# CMake options
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
set(AUDIO_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/audio")
add_definitions("-DUSE_DEFAULT_STDLIB=1")

# Main library sources
file(GLOB SOURCES "src/*.cpp" "src/*.c" "nanopb/*.c" "src/audio/container/*.cpp" "src/dsp/*.cpp" "src/dsp/transforms/*.cpp")
list(APPEND EXTRA_INCLUDES "include/platform")
list(APPEND EXTRA_INCLUDES "include/audio/container")
list(APPEND EXTRA_INCLUDES "include/dsp/")
list(APPEND EXTRA_INCLUDES "include/dsp/transforms")

# Add platform specific sources
if(ESP_PLATFORM)
    file(GLOB ESP_PLATFORM_SOURCES "src/platform/esp/*.cpp" "src/platform/esp/*.c" "src/asm/biquad_f32_ae32.S")
    list(APPEND SOURCES ${ESP_PLATFORM_SOURCES})
endif()
if(UNIX)
    file(GLOB UNIX_PLATFORM_SOURCES "src/platform/unix/*.cpp" "src/platform/unix/*.c")
    list(APPEND SOURCES ${UNIX_PLATFORM_SOURCES})
endif()
if(APPLE)
    file(GLOB APPLE_PLATFORM_SOURCES "src/platform/apple/*.cpp" "src/platform/apple/*.c")
    list(APPEND SOURCES ${APPLE_PLATFORM_SOURCES})
    list(APPEND EXTRA_INCLUDES "/usr/local/opt/mbedtls@3/include")
endif()
if(UNIX AND NOT APPLE)
    file(GLOB LINUX_PLATFORM_SOURCES "src/platform/linux/*.cpp" "src/platform/linux/*.c")
    list(APPEND SOURCES ${LINUX_PLATFORM_SOURCES})
endif()

# A hack to make Opus keep quiet
function(message)
    if(NOT MESSAGE_QUIET)
        _message(${ARGN})
    endif()
endfunction()

if(ESP_PLATFORM)
    list(APPEND EXTRA_LIBS idf::mbedtls idf::pthread idf::mdns)
    add_definitions(-Wunused-const-variable -Wchar-subscripts -Wunused-label -Wmaybe-uninitialized -Wmisleading-indentation)
else()
    find_package(Threads REQUIRED)
    set(THREADS_PREFER_PTHREAD_FLAG ON)

    find_package(MbedTLS REQUIRED)

    list(APPEND EXTRA_INCLUDES ${MBEDTLS_INCLUDE_DIRS})
    list(APPEND EXTRA_LIBS ${MBEDTLS_LIBRARIES})
    list(APPEND EXTRA_LIBS Threads::Threads)
endif()

if(NOT BELL_DISABLE_CODECS)
    list(APPEND SOURCES "${AUDIO_DIR}/codec/DecoderGlobals.cpp")
    list(APPEND SOURCES "${AUDIO_DIR}/codec/BaseCodec.cpp")
    list(APPEND SOURCES "${AUDIO_DIR}/codec/AudioCodecs.cpp")
    list(APPEND EXTRA_INCLUDES "include/audio/codec")
    # AAC-LC codec
    if(BELL_CODEC_AAC)
        file(GLOB LIBHELIX_AAC_SOURCES "libhelix-aac/*.c")
        list(APPEND LIBHELIX_SOURCES ${LIBHELIX_AAC_SOURCES})
        list(APPEND EXTRA_INCLUDES "libhelix-aac")
        list(APPEND SOURCES "${AUDIO_DIR}/codec/AACDecoder.cpp")
        list(APPEND CODEC_FLAGS "-DBELL_CODEC_AAC")
    endif()
    # MP3 codec
    if(BELL_CODEC_MP3)
        file(GLOB LIBHELIX_MP3_SOURCES "libhelix-mp3/*.c")
        list(APPEND LIBHELIX_SOURCES ${LIBHELIX_MP3_SOURCES})
        list(APPEND EXTRA_INCLUDES "libhelix-mp3")
        list(APPEND SOURCES "${AUDIO_DIR}/codec/MP3Decoder.cpp")
        list(APPEND CODEC_FLAGS "-DBELL_CODEC_MP3")
    endif()

    # MP3 codec
    if(BELL_CODEC_ALAC)
        file(GLOB ALAC_SOURCES "alac/*.c" "alac/*.cpp")
        list(APPEND ALAC_SOURCES ${ALAC_SOURCES})
        list(APPEND EXTRA_INCLUDES "alac")
        # list(APPEND SOURCES "${AUDIO_DIR}/codec/ALACDecoder.cpp")
        list(APPEND CODEC_FLAGS "-DBELL_CODEC_ALAC")
    endif()
    # libhelix Cygwin workaround
    if(CYGWIN)
        # Both Cygwin and ESP are Unix-like so this seems to work (or, at least, compile)
        set_source_files_properties("${AUDIO_DIR}/codec/DecoderGlobals.cpp" ${LIBHELIX_SOURCES} PROPERTIES COMPILE_FLAGS "-DESP_PLATFORM")
    endif()
    list(APPEND SOURCES ${LIBHELIX_SOURCES})
    list(APPEND SOURCES ${ALAC_SOURCES})
    # Vorbis codec
    if(BELL_CODEC_VORBIS)
        file(GLOB TREMOR_SOURCES "tremor/*.c")
        list(REMOVE_ITEM TREMOR_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/tremor/ivorbisfile_example.c")
        list(APPEND SOURCES ${TREMOR_SOURCES})
        list(APPEND EXTRA_INCLUDES "tremor")
        list(APPEND SOURCES "${AUDIO_DIR}/codec/VorbisDecoder.cpp")
        list(APPEND CODEC_FLAGS "-DBELL_CODEC_VORBIS")
    endif()
    # Opus codec
    if(BELL_CODEC_OPUS)
        set(OPUS_INSTALL_CMAKE_CONFIG_MODULE OFF CACHE BOOL "")
        set(OPUS_INSTALL_CMAKE_CONFIG_MODULE OFF)
        set(OPUS_INSTALL_PKG_CONFIG_MODULE OFF CACHE BOOL "")
        set(OPUS_INSTALL_PKG_CONFIG_MODULE OFF)
        set(MESSAGE_QUIET ON)
        add_subdirectory("opus")
        unset(MESSAGE_QUIET)
        target_compile_options(opus PRIVATE "-O3")
        list(APPEND EXTRA_LIBS Opus::opus)
        list(APPEND SOURCES "${AUDIO_DIR}/codec/OPUSDecoder.cpp")
        list(APPEND CODEC_FLAGS -DBELL_CODEC_OPUS)
    endif()
    # Enable global codecs
    string(REPLACE ";" " " CODEC_FLAGS "${CODEC_FLAGS}")
    set_source_files_properties("${AUDIO_DIR}/codec/AudioCodecs.cpp" PROPERTIES COMPILE_FLAGS "${CODEC_FLAGS}")
endif()

if(NOT BELL_DISABLE_SINKS)
    set(PLATFORM "unix")
    if(ESP_PLATFORM)
        set(PLATFORM "esp")
    endif()
    # Add all built-in audio sinks
    file(GLOB SINK_SOURCES "${AUDIO_DIR}/sinks/${PLATFORM}/*.cpp" "${AUDIO_DIR}/sinks/${PLATFORM}/*.c")
    list(APPEND EXTRA_INCLUDES "include/audio/sinks/${PLATFORM}")
    # Find ALSA if required, else remove the sink
    if(BELL_SINK_ALSA)
        find_package(ALSA REQUIRED)
        list(APPEND EXTRA_INCLUDES ${ALSA_INCLUDE_DIRS})
        list(APPEND EXTRA_LIBS ${ALSA_LIBRARIES})
    else()
        list(REMOVE_ITEM SINK_SOURCES "${AUDIO_DIR}/sinks/unix/ALSAAudioSink.cpp")
    endif()
    # Find PortAudio if required, else remove the sink
    if(BELL_SINK_PORTAUDIO)
        find_package(portaudio REQUIRED)
        list(APPEND EXTRA_INCLUDES ${PORTAUDIO_INCLUDE_DIRS})
        list(APPEND EXTRA_LIBS ${PORTAUDIO_LIBRARIES})
    else()
        list(REMOVE_ITEM SINK_SOURCES "${AUDIO_DIR}/sinks/unix/PortAudioSink.cpp")
    endif()
    list(APPEND SOURCES ${SINK_SOURCES})
endif()

if(BELL_DISABLE_CJSON)
    list(REMOVE_ITEM SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/src/JSONObject.cpp")
else()
    if(BELL_EXTERNAL_CJSON)
        list(APPEND EXTRA_LIBS ${BELL_EXTERNAL_CJSON})
    else()
        list(APPEND SOURCES "cJSON/cJSON.c")
        list(APPEND EXTRA_INCLUDES "cJSON")
    endif()
endif()

add_library(bell STATIC ${SOURCES})
# PUBLIC to propagate esp-idf includes to bell dependents
target_link_libraries(bell PUBLIC ${EXTRA_LIBS})
target_include_directories(bell PUBLIC "include" ${EXTRA_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR})
target_compile_definitions(bell PUBLIC PB_ENABLE_MALLOC)
